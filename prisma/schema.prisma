// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Enums
enum STATUS {
    PENDING
    APPROVED
    REJECTED
}

// User model
model Users {
    id         String        @id @default(uuid())
    name       String
    email      String        @unique
    password   String
    createdAt  DateTime      @default(now())
    updatedAt  DateTime      @updatedAt
    profile    UserProfiles?
    FoundItems FoundItems[]
    Claims     Claims[]
}

// FoundItemCategory Model
model FoundItemCategories {
    id         String      @id @default(uuid())
    name       String
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    FoundItems FoundItems?
}

// FoundItems Model
model FoundItems {
    id            String              @id @default(uuid())
    user          Users               @relation(fields: [userId], references: [id])
    userId        String              @unique
    category      FoundItemCategories @relation(fields: [categoryId], references: [id])
    categoryId    String              @unique
    foundItemName String
    description   String
    location      String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Claims    Claims?
}

// Claims Model
model Claims {
    id                     String     @id @default(uuid())
    user                   Users      @relation(fields: [userId], references: [id])
    userId                 String     @unique
    foundItem              FoundItems @relation(fields: [foundItemId], references: [id])
    foundItemId            String     @unique
    status                 STATUS     @default(PENDING)
    distinguishingFeatures String
    lostDate               DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// UserProfile Model
model UserProfiles {
    id        String   @id @default(uuid())
    user      Users    @relation(fields: [userId], references: [id])
    userId    String   @unique
    age       Int
    bio       String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
