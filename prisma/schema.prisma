// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Enums
enum STATUS {
    PENDING
    APPROVED
    REJECTED
}

// User model
model Users {
    id         String        @id @default(uuid())
    name       String
    email      String        @unique
    password   String
    createdAt  DateTime      @default(now())
    updatedAt  DateTime      @updatedAt
    profile    UserProfiles?
    FoundItems FoundItems[]
    Claims     Claims[]
    FoundBy    FoundBy[]
}

// FoundItemCategory Model
model FoundItemCategories {
    id         String       @id @default(uuid())
    name       String
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    FoundItems FoundItems[]
}

model FoundBy {
    id          String     @id @default(uuid())
    user        Users      @relation(fields: [userId], references: [id])
    userId      String
    foundItem   FoundItems @relation(fields: [foundItemId], references: [id])
    foundItemId String     @unique
    Claims      Claims[]
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
}

// FoundItems Model
model FoundItems {
    id            String              @id @default(uuid())
    user          Users               @relation(fields: [userId], references: [id])
    userId        String
    category      FoundItemCategories @relation(fields: [categoryId], references: [id])
    categoryId    String
    foundItemName String
    description   String
    location      String
    isItemFound   Boolean             @default(false)
    photoUrl      String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    FoundBy   FoundBy?
    Claims    Claims?  @relation(fields: [claimsId], references: [id])
    claimsId  String?
}

// Claims Model
model Claims {
    id                     String   @id @default(uuid())
    user                   Users    @relation(fields: [userId], references: [id])
    userId                 String   @unique
    foundBy                FoundBy  @relation(fields: [foundById], references: [id])
    foundById              String
    status                 STATUS   @default(PENDING)
    distinguishingFeatures String
    lostDate               DateTime

    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    FoundItems FoundItems[]
}

// UserProfile Model
model UserProfiles {
    id        String   @id @default(uuid())
    user      Users    @relation(fields: [userId], references: [id])
    userId    String   @unique
    age       Int
    bio       String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
